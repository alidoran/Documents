install Git:
sudo apt update 
sudo apt install git -y
git --version
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
git config --list
Generate SSH for each device:
ssh-keygen -t ed25519 -C "your.email@example.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
Copy the entire output:
cat ~/.ssh/id_ed25519.pub
Test SSH key:
ssh -T git@github.com
The result should be:
Hi, username! You've successfully authenticated, but GitHub does not provide shell access.
webhook:
VPS:
cd /path/to/your/webhook-server
git clone git@github.com:your-username/repository-name.git
cd ServerReferences
sudo apt update
sudo apt install nodejs npm
sudo npm install -g pm2
npm install express body-parser
nano webhook_listener.js ->

const https = require('https');
const fs = require('fs');
const { exec } = require('child_process');

const options = {
  key: fs.readFileSync('/etc/letsencrypt/live/<domain>/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/<domain>/fullchain.pem'),
};

const server = https.createServer(options, (req, res) => {
  console.log('Received request:', req.method);  // Log method (should be POST)

  if (req.method === 'POST') {
    let body = '';

    req.on('data', chunk => {
      body += chunk;
    });

    req.on('end', () => {
      console.log('Received body:', body);  // Log the body received from the request

      try {
        const payload = JSON.parse(body);
        console.log('Parsed payload:', payload);  // Log the parsed payload

        if (payload.ref === 'refs/heads/main') {
          console.log('Main branch push detected');

          // Ensure paths and commands are fully qualified
          exec(
            `cd /root/ServerReferences && ` +
            `$(which git) fetch git@github.com:<gihub name>/<repo>.git && ` +
            `$(which git) stash && ` +
            `$(which git) reset --hard origin/main && ` +
            `$(which pm2) reload ktor-server`,
            (err, stdout, stderr) => {
              if (err) {
                console.error('Exec error:', stderr);  // Log exec error
                res.statusCode = 500;
                res.end(`Error: ${stderr}`);
                return;
              }
              console.log('Deployment completed:', stdout);  // Log successful deployment
              res.statusCode = 200;
              res.end(`Deployment completed: ${stdout}`);
            });
        } else {
          console.log('Not a main branch push');
          res.statusCode = 200;
          res.end('Not a main branch push.');
        }
      } catch (error) {
        console.error('Error parsing payload:', error);  // Log parsing error
        res.statusCode = 400;
        res.end('Invalid JSON');
      }
    });
  } else {
    res.statusCode = 405;
    res.end('Method Not Allowed');
  }
});

// Listen on IPv4
server.listen(3001, '0.0.0.0', () => {
  console.log('Listening for webhooks on port 3001 (IPv4)...');
});

cntl X
pm2 start webhook_listener.js
pm2 status


sudo apt install nginx
sudo apt install python3-certbot-nginx
sudo systemctl start nginx
sudo systemctl enable nginx
sudo systemctl status nginx
sudo ufw allow 'Nginx Full'

SSL:
sudo apt install certbot
sudo certbot certonly --nginx -d domain -d www.domain
Generate certificate by TXT DNS instead of port80
sudo certbot -d <domain> -d www.<domain> --manual --preferred-challenges dns-01 certonly

PHP:
sudo apt install php8.3-fpm -y
sudo systemctl start php8.3-fpm
sudo systemctl enable php8.3-fpm
sudo systemctl restart nginx

sudo nano /etc/nginx/sites-available/default

#Webhook listener
server {
  listen 8031 ssl;
  listen [::]:8031 ssl;
  server_name <domain>;
  ssl_certificate /etc/letsencrypt/live/<domain>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<domain>/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
  location /github-webhook {
    proxy_pass https://localhost:3001;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}

#Api Listener 
server {
    listen 8030 ssl;
    listen [::]:8030 ssl;
    server_name <domain>;

    ssl_certificate /etc/letsencrypt/live/<domain>/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/<domain>/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_pass http://localhost:8032;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

#NextCloud listener
upstream php-handler {
    server 127.0.0.1:9000;
    server unix:/run/php/php8.3-fpm.sock;
}

map $arg_v $asset_immutable {
    "" "";
    default ", immutable";
}

server {
    listen 8090 ssl;
    listen [::]:8090 ssl;
    #http2 on;
    server_name <domain>;

    # Path to the root of your installation
    root /var/www/nextcloud;

    ssl_certificate /etc/letsencrypt/live/<domain>/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/<domain>/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#   Prevent nginx HTTP Server Detection
    server_tokens off;

    # HSTS settings
    # WARNING: Only add the preload option once you read about
    # the consequences in https://hstspreload.org/. This option
    # will add the domain to a hardcoded list that is shipped
    # in all major browsers and getting removed from this list
    # could take several months.
    #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload" always;

    # set max upload size and increase upload timeout:
    client_max_body_size 512M;
    client_body_timeout 300s;
    fastcgi_buffers 64 4K;

    # Enable gzip but do not remove ETag headers
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml text/javascript application/javascript application/json applicati>

    # Pagespeed is not supported by Nextcloud, so if your server is built
    # with the `ngx_pagespeed` module, uncomment this line to disable it.
#   pagespeed off;

    # The settings allows you to optimize the HTTP2 bandwidth.
    # See https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/
    # for tuning hints
    client_body_buffer_size 512k;

    # HTTP response headers borrowed from Nextcloud `.htaccess`
    add_header Referrer-Policy                   "no-referrer"       always;
    add_header X-Content-Type-Options            "nosniff"           always;
    add_header X-Frame-Options                   "SAMEORIGIN"        always;
    add_header X-Permitted-Cross-Domain-Policies "none"              always;
    add_header X-Robots-Tag                      "noindex, nofollow" always;
#    add_header X-XSS-Protection                  "1; mode=block"     always;

    # Remove X-Powered-By, which is an information leak
    fastcgi_hide_header X-Powered-By;

    # Set .mjs and .wasm MIME types
    # Either include it in the default mime.types list
    # and include that list explicitly or add the file extension
    # only for Nextcloud like below:
    include mime.types;
    types {
        text/javascript mjs;

    }

    # Specify how to handle directories -- specifying `/index.php$request_uri`
    # here as the fallback means that Nginx always exhibits the desired behaviour
    # when a client requests a path that corresponds to a directory that exists
    # on the server. In particular, if that directory contains an index.php file,
    # that file is correctly served; if it doesn't, then the request is passed to
    # the front-end controller. This consistent behaviour means that we don't need
    # to specify custom rules for certain paths (e.g. images and other assets,
    # `/updater`, `/ocs-provider`), and thus
    # `try_files $uri $uri/ /index.php$request_uri`
    # always provides the desired behaviour.
    index index.php index.html /index.php$request_uri;

    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
    location = / {
        if ( $http_user_agent ~ ^DavClnt ) {
            return 302 /remote.php/webdav/$is_args$args;
        }
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Make a regex exception for `/.well-known` so that clients can still
    # access it despite the existence of the regex rule
    # `location ~ /(\.|autotest|...)` which would otherwise handle requests
    # for `/.well-known`.
    location ^~ /.well-known {
        # The rules in this block are an adaptation of the rules
        # in `.htaccess` that concern `/.well-known`.

        location = /.well-known/carddav { return 301 /remote.php/dav/; }
        location = /.well-known/caldav  { return 301 /remote.php/dav/; }

        location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
        location /.well-known/pki-validation    { try_files $uri $uri/ =404; }

        # Let Nextcloud's API for `/.well-known` URIs handle all other
        # requests by passing them to the front-end controller.
        return 301 /index.php$request_uri;
    }

    # Rules borrowed from `.htaccess` to hide certain paths from clients
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)                { return 404; }

    # Ensure this block, which passes PHP files to the PHP process, is above the blocks
    # which handle static assets (as seen below). If this block is not declared first,
    # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
    # to the URI, resulting in a HTTP 500 error response.
    location ~ \.php(?:$|/) {
        # Required for legacy support
        rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|ocs-pr>

        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        set $path_info $fastcgi_path_info;

        try_files $fastcgi_script_name =404;

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $path_info;
        fastcgi_param HTTPS on;

        fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
        fastcgi_param front_controller_active true;     # Enable pretty urls
        fastcgi_pass php-handler;

        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;

        fastcgi_max_temp_file_size 0;
    }

    # Serve static files
    location ~ \.(?:css|js|mjs|svg|gif|ico|jpg|png|webp|wasm|tflite|map|ogg|flac)$ {
        try_files $uri /index.php$request_uri;
        # HTTP response headers borrowed from Nextcloud `.htaccess`
        add_header Cache-Control                     "public, max-age=15778463$asset_immutable";
        add_header Referrer-Policy                   "no-referrer"       always;
        add_header X-Content-Type-Options            "nosniff"           always;
        add_header X-Frame-Options                   "SAMEORIGIN"        always;
        add_header X-Permitted-Cross-Domain-Policies "none"              always;
        add_header X-Robots-Tag                      "noindex, nofollow" always;
        add_header X-XSS-Protection                  "1; mode=block"     always;
        access_log off;     # Optional: Don't log access to assets
    }

    location ~ \.(otf|woff2?)$ {
        try_files $uri /index.php$request_uri;
        expires 7d;         # Cache-Control policy borrowed from `.htaccess`
        access_log off;     # Optional: Don't log access to assets
    }

    # Rule borrowed from `.htaccess`
    location /remote {
        return 301 /remote.php$request_uri;
    }

    location / {
        try_files $uri $uri/ /index.php$request_uri;
    }
}

cntl X
sudo nginx -t
sudo systemctl reload nginx
sudo ln -s /usr/local/bin/pm2 /usr/bin/pm2
Test -> curl -X POST http://45.61.134.158:8081 -d '{"ref": "refs/heads/main"}' -H "Content-Type: application/json"
Logs -> pm2 logs

/usr/bin/pm2 start "java -jar /root/ServerReferences/jar-compile/ServerReferences-all.jar" --name ktor-server


GitHub:
Go to your GitHub repository (ServerReferences) settings.
Under Webhooks, click Add webhook.
Set the Payload URL to: ->
http://your_server_domain_or_IP:8081/github-webhook
Set Content type to -> application/json.
Select the events you want (e.g., "push").
Click Add webhook to save.



Additional helpful commands:
sudo nano /etc/nginx/sites-enabled/default
sudo nano ~/ServerReferences/webhook_listener.js

pm2 restart webhook_listener ktor-server
pm2 status
pm2 logs webhook_listener
pm2 start ~/ServerReferences/webhook_listener.js


sudo systemctl status nginx
sudo systemctl restart nginx

sudo fuser -k 8081/tcp 8082/tcp 3000/tcp 3001/tcp

sudo systemctl list-units --type=service
sudo systemctl disable <service_name>

/usr/bin/pm2 start "java -jar /root/ServerReferences/build/libs/ServerReferences-all.jar" --name ktor-server

sudo lsof -i :8082
sudo kill -9 32485
