install Git:
sudo apt update 
sudo apt install git -y
git --version
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
git config --list

Generate SSH for each device:
ssh-keygen -t ed25519 -C "your.email@example.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
Copy the entire output to GitHub SSH:
cat ~/.ssh/id_ed25519.pub
Test SSH key:
ssh -T git@github.com
The result should be:
Hi, username! You've successfully authenticated, but GitHub does not provide shell access.

webhook:
VPS:
cd /path/to/your/webhook-server
git clone git@github.com:your-username/repository-name.git
cd repository-name
sudo apt update
sudo apt install nodejs npm
sudo npm install -g pm2
npm install express body-parser
nano webhook_listener.js ->

const https = require('https');
const fs = require('fs');
const { exec } = require('child_process');

const options = {
  key: fs.readFileSync('/etc/letsencrypt/live/<domain>/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/<domain>/fullchain.pem'),
};

const server = https.createServer(options, (req, res) => {
  console.log('Received request:', req.method);  // Log method (should be POST)

  if (req.method === 'POST') {
    let body = '';

    req.on('data', chunk => {
      body += chunk;
    });

    req.on('end', () => {
      console.log('Received body:', body);  // Log the body received from the request

      try {
        const payload = JSON.parse(body);
        console.log('Parsed payload:', payload);  // Log the parsed payload

        if (payload.ref === 'refs/heads/main') {
          console.log('Main branch push detected');

          // Ensure paths and commands are fully qualified
          exec(
            `cd /root/ServerReferences && ` +
            `$(which git) fetch git@github.com:<gihub name>/<repo>.git && ` +
            `$(which git) stash && ` +
            `$(which git) reset --hard origin/main && ` +
            `$(which pm2) reload ktor-server`,
            (err, stdout, stderr) => {
              if (err) {
                console.error('Exec error:', stderr);  // Log exec error
                res.statusCode = 500;
                res.end(`Error: ${stderr}`);
                return;
              }
              console.log('Deployment completed:', stdout);  // Log successful deployment
              res.statusCode = 200;
              res.end(`Deployment completed: ${stdout}`);
            });
        } else {
          console.log('Not a main branch push');
          res.statusCode = 200;
          res.end('Not a main branch push.');
        }
      } catch (error) {
        console.error('Error parsing payload:', error);  // Log parsing error
        res.statusCode = 400;
        res.end('Invalid JSON');
      }
    });
  } else {
    res.statusCode = 405;
    res.end('Method Not Allowed');
  }
});

// Listen on IPv4
server.listen(3001, '0.0.0.0', () => {
  console.log('Listening for webhooks on port 3001 (IPv4)...');
});

cntl X
pm2 start webhook_listener.js
pm2 status

install java:
sudo apt install openjdk-21-jdk -y


Install nginx through nginx.txt install part.   
Install domain SSL by DomainSSL.txt file.
Install PHP by PHP.txt file.



sudo nano /etc/nginx/sites-available/default

#Webhook listener
server {
  listen 8031 ssl;
  listen [::]:8031 ssl;
  server_name <domain>;
  ssl_certificate /etc/letsencrypt/live/<domain>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<domain>/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
  location /github-webhook {
    proxy_pass https://localhost:3001;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}

GitHub:
Go to your GitHub repository (ServerReferences) settings.
Under Webhooks, click Add webhook.
Set the Payload URL to: ->
http://your_server_domain_or_IP:8081/github-webhook
Set Content type to -> application/json.
Select the events you want (e.g., "push").
Click Add webhook to save.


Additional details:
PM2 log:
Logs -> pm2 logs

/usr/bin/pm2 start "java -jar /root/ServerReferences/jar-compile/ServerReferences-all.jar" --name ktor-server

sudo nano /etc/nginx/sites-enabled/default
sudo nano ~/ServerReferences/webhook_listener.js

pm2 restart webhook_listener ktor-server
pm2 status
pm2 logs webhook_listener
pm2 start ~/ServerReferences/webhook_listener.js


sudo systemctl status nginx
sudo systemctl restart nginx

sudo fuser -k 8081/tcp 8082/tcp 3000/tcp 3001/tcp

sudo systemctl list-units --type=service
sudo systemctl disable <service_name>

/usr/bin/pm2 start "java -jar /root/ServerReferences/build/libs/ServerReferences-all.jar" --name ktor-server

sudo lsof -i :8082
sudo kill -9 32485
